'use client'

import { useEffect, useState } from 'react'
import { useRouter, useParams } from 'next/navigation'
import { ThemeToggle } from '@/components/layout/ThemeToggle'
import { useAuthStore } from '@/store/authStore'
import { Loader2, LayoutDashboard, LogOut, DollarSign, TrendingUp, TrendingDown } from 'lucide-react'
import { getDictionary } from '../../../../../get-dictionary'
import { Locale } from '../../../i18n-config'
import LanguageSwitcher from '@/components/LanguageSwitcher'

export default function DashboardPage() {
    const router = useRouter()
    const params = useParams()
    const lang = params.lang as Locale

    const { user, token, logout } = useAuthStore()
    const [isLoading, setIsLoading] = useState(true)
    const [dictionary, setDictionary] = useState<any>({})

    useEffect(() => {
        const initializeDashboard = async () => {
            try {
                // Load dictionary
                const dict = await getDictionary(lang)
                setDictionary(dict)

                // Check authentication
                await new Promise(resolve => setTimeout(resolve, 100))
                const { user, token } = useAuthStore.getState()
                if (!user || !token) {
                    router.push(`/${lang}/login`)
                } else {
                    setIsLoading(false)
                }
            } catch (error) {
                console.error('Dashboard initialization failed:', error)
            }
        }

        initializeDashboard()
    }, [lang, router])

    const handleLogout = () => {
        logout()
        router.push(`/${lang}/login`)
    }

    if (isLoading || !dictionary.dashboard) {
        return (
            <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-blue-100 dark:from-gray-900 dark:to-gray-800">
                <Loader2 className="w-8 h-8 animate-spin text-blue-500" />
            </div>
        )
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 dark:from-gray-900 dark:to-gray-800 transition-colors duration-300">
            <div className="container mx-auto px-4 py-8">
                <div className="flex justify-between items-center mb-8">
                    <div className="flex items-center space-x-2">
                        <LayoutDashboard className="h-8 w-8 text-blue-600 dark:text-blue-400" />
                        <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                            {dictionary.dashboard.title}
                        </h1>
                    </div>
                    <div className="flex items-center space-x-4">
                        {/* <LanguageSwitcher /> */}
                        <ThemeToggle />
                        <span className="text-gray-600 dark:text-gray-300 transition-colors">
                            {dictionary.dashboard.welcome}, {user?.username}
                        </span>
                        <button
                            onClick={handleLogout}
                            className="flex items-center px-4 py-2 bg-red-500 text-white rounded-lg 
                                     hover:bg-red-600 transition-colors"
                        >
                            <LogOut className="w-4 h-4 mr-2" />
                            {dictionary.dashboard.logout}
                        </button>
                    </div>
                </div>

                <div>
                    <h2 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
                        {dictionary.dashboard.quickOverview}
                    </h2>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <DashboardWidget
                            title={dictionary.dashboard.totalBalance}
                            value="$5,420.75"
                            color="green"
                            icon={<DollarSign className="w-6 h-6" />}
                        />
                        <DashboardWidget
                            title={dictionary.dashboard.monthlyIncome}
                            value="$3,250.00"
                            color="blue"
                            icon={<TrendingUp className="w-6 h-6" />}
                        />
                        <DashboardWidget
                            title={dictionary.dashboard.monthlyExpenses}
                            value="$2,180.50"
                            color="red"
                            icon={<TrendingDown className="w-6 h-6" />}
                        />
                    </div>
                </div>

                <div className="mt-8">
                    <h2 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
                        {dictionary.dashboard.recentTransactions}
                    </h2>
                    <div className="bg-white/80 dark:bg-gray-800/80 shadow-lg rounded-lg p-6 backdrop-blur-sm">
                        <p className="text-gray-600 dark:text-gray-300">
                            {dictionary.dashboard.transactionListEmpty}
                        </p>
                    </div>
                </div>
            </div>
        </div>
    )
}

type WidgetColor = 'green' | 'blue' | 'red'

interface DashboardWidgetProps {
    title: string
    value: string
    color: WidgetColor
    icon: React.ReactNode
}

function DashboardWidget({ title, value, color, icon }: DashboardWidgetProps) {
    const colorClasses: Record<WidgetColor, string> = {
        green: 'text-green-600 dark:text-green-400',
        blue: 'text-blue-600 dark:text-blue-400',
        red: 'text-red-600 dark:text-red-400',
    }

    return (
        <div className="bg-white/80 dark:bg-gray-800/80 shadow-lg rounded-lg p-6 backdrop-blur-sm transition-all hover:scale-105">
            <div className="flex items-center justify-between mb-2">
                <h3 className="text-gray-500 dark:text-gray-400 text-sm font-medium">
                    {title}
                </h3>
                <div className={`${colorClasses[color]}`}>
                    {icon}
                </div>
            </div>
            <p className={`text-2xl font-bold ${colorClasses[color]} transition-colors`}>
                {value}
            </p>
        </div>
    )
}